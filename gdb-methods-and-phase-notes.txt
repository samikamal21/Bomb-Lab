USEFUL METHODS GDB METHODS:
gdb bomb -> opens gdb bugger

break functionName-> break statement at function start (break phase_1)

break *(hex value) -> adds break to a line

stepi (si) -> will step to the next line but NOT execute it

info r -> print all registers and values (find flags and register values here)

ctr+c will quit the program

quit -> kill gdb

disas -> show asm code

layout asm (MOST USEFUL METHOD TO VIEW ASSEMBLY CODE)

nm -C <program name> -> view all loops and conditions in a program

chmod +x <file name> -> allows us to run a file if permisison is denied

info breakpoints -> see all breakpoints 

x/s <register> -> prints string at memory address (ex: x/s $rdi) 

x/d <register> -> prints the memory address in and int format (ex:  x/d $rdi)

ni -> next instruction and skips over a function call

p $<register> -> prints value at register (ex: p$eax)

NOTES ABOUT EACH PHASE:

PHASE 1:
It takes 1 int
566 works because > 554 + a multiple of 6

PHASE 2:
It takes 6 ints (%d %d %d %d %d %d)
rdi=54

Trial: 1 6 16 31 51 76 (WORKED)

PHASE 3: 
It takes 2 ints (%d)
First int has to be from 0-7
$eax = 774
Trial 1: 0 774  X
Trial 2: 1 774  X
Trial 3: 2 774  X
Trail 4: 3 774  X
Trial 5: 4 774  (WORKED)
Trial 6: 5 774
Trial 7: 6 774

PHASE 4:
Takes 2 ints (%d %d)
First int has to be less than 14
Second int has to 6 in order to defuse phase 4

Trial 1: 0 6 X 
Trial 2: 1 6 X 
Trial 3: 2 6 X 
Trial 4: 3 6 X 
Trial 5: 4 6 X 
Trial 6: 5 6 X 
Trial 7: 6 6 (WORKED)

PHASE 5:
Takes 7 ints (%d %d %d %d %d %d %d)

All 7 integers need to somehow output 1 when passed into fun5 to defuse phase 5

Trial 5: 1 2 3 4 5 0 0 X (did not jump and went to second return statement)

IMPORTANT NOTES:
- 6th arugment has to be 0
- 1st argument has to be less than 2nd argument
- $eax has to equal 4th argument (ex of this working from trial 7 below was 3 7 2 7 5 0 7)

Trial 1: 1 2 3 4 5 6 7
288a: load edi (1) into eax (7), eax=7
288c: Perform AND from stack and r9d (6), corresponds to 6th arguemnt => r9d has to be 0
FAILED

Trial 2: 1 2 3 4 5 0 7
288a: load edi (1) into eax (1), eax=1
288c: Perform AND from stack and r9d (0, which is 6th argument)
2891: Did not jump since r9d (6th arugment) is 0
2893: Compare esi (2nd argument) with edi (1st parameter)
	esi = 2 & edi = 1
2895: if esi > edi, jump to 28a1
2897: Added 1 to r9d, r9d=1
289b: Add edx (3rd argument) to eax
	edx=3, eax=4
289d: Compare eax (new value) with esi (2nd argument)
	eax=4, esi=2
289f: if eax > esi, jump back to 2897, which loops and increments r9d and adds edx (3rd argument) to eax
	4(eax) > 2(esi), jump back to 289, r9d=2 & eax=7
	Didn't jump for some reason
28a1: Adds r9d (1) to r8d (5), so r8d=6
28a4: Compares r8d with another value from stack
28a9: Jump to 28bb if the two values are not equal.
FAILED

Trial 3: 1 0 3 4 5 0 7
288a: load edi (1) into eax (1), eax=1
288c: Perform AND from stack and r9d (0, which is 6th argument)
2891: Did not jump since r9d (6th arugment) is 0
2893: Compare esi (2nd argument) with edi (1st parameter)
2895: if esi (0) > edi (1), don't jump to 28a1
28a1: Jumped, so add r9d (0) to r8d (5), r8d=5
28a4: Compares r8d with another value from stack
28a9: Jump to 28bb if the two values are not equal.
FAILED

Trial 4: 1 2 3 4 -1 0 7
288a: load edi (1) into eax (7), eax=1
288c: Perform AND from stack and r9d (0, which is 6th argument)
2891: Did not jump since r9d (6th arugment) is 0
2893: Compare esi (2nd argument) with edi (1st parameter)
2895: if esi (2) > edi (1), don't jump
2897: Added 1 to r9d, r9d=1
289b: Add edx (3rd argument) to eax
	$eax=1, $edx=3, $eax=4
289d: Compare eax (new value) with esi (2nd argument)
	$eax=4, $esi=2
289f: if eax > esi, jump back to 2897, which loops and increments r9d and adds edx (3rd argument) to eax
	4(eax) > 2(esi), jump back to 2897, r9d=2 & eax=7
	Didn't jump for some reason (I think it may be other way around)
FAILED

Trial 5: 4 8 3 8 -1 0 7, Note: 289f should have been <, and I figured it out in this trial 
288a: load edi (4) into eax (7), eax=4
288c: Perform AND from stack and r9d (0, which is 6th argument)
2891: Did not jump since r9d (6th arugment) is 0
2893: Compare esi (2nd argument) with edi (1st parameter)
2895: if esi (8) > edi (4), don't jump
2897: Added 1 to r9d, r9d=1
289b: Add edx (3rd argument) to eax
	$eax=4, $edx=3 => $eax=7
289d: Compare eax (new value) with esi (2nd argument)
	$eax=7, $esi=8
289f: if eax < esi, jump back to 2897, which loops and increments r9d and adds edx (3rd argument) to eax
	7(eax) > 8(esi), jump back to 2897, r9d=2 & eax=7
2897: Added 1 to rd9, rd9=2 (loop counter = 2)
289b: Add edx (3rd argument) to eax
	$eax=7, $edx=3, $eax=10
289d: Compare eax (new value) with esi (2nd argument)
	$eax=10, $esi=2
289f: if eax < esi, jump back to 2897, which loops and increments r9d and adds edx (3rd argument) to eax
	10(eax) > 8(esi), jump back to 2897, r9d=2 & eax=10
	Don't jump since eax > esi (10 > 8)
28a1: Adds r9d (2) to r8d (-1), so r8d=1
28a4: Compares r8d with rsp
	r8d=1, rsp=1431660877
28a9: Jump to 28bb if the two values are not equal.
FAILED

Trial 6: 3 7 2 4 5 0 7
288a: load edi (3) into eax (7), eax=3
288c: Perform AND from stack (rsp) and r9d (0, which is 6th argument), rsp=1431660877, r8d=5
2891: Did not jump since r9d (6th arugment) is 0
2893: Compare esi (2nd argument) with edi (1st parameter)
2895: if esi (7) > edi (3), don't jump
2897: Added 1 to rd9, rd9=2 (loop counter = 1), r8d=5
289b: Add edx (3rd argument) to eax
	$eax=3, $edx=2 => $eax=5, r8d=5
289d: Compare eax (new value) with esi (2nd argument), r8d=5
	$eax=5, $esi=7
289f: if eax < esi, jump back to 2897, which loops and increments r9d and adds edx (3rd argument) to eax
	5(eax) < 7(esi), jump back to 2897, r9d=2 & eax=10, r8d=5
	Don't jump since eax > esi (10 > 8)
2897: Added 1 to rd9, rd9=2 (loop counter = 2), r8d=5
289b: Add edx (3rd argument) to eax
	$eax=5, $edx=2 => $eax=7, r8d=5
289d: Compare eax (new value) with esi (2nd argument), r8d=5
	$eax=7, $esi=7
289f: if eax < esi, jump back to 2897, which loops and increments r9d and adds edx (3rd argument) to eax
	7(eax) < 7(esi), jump back to 2897, r9d=2 & eax=7, r8d=5
	Didn't jump
28a1: Add r9d (2) to r8d (5), $r8d=7
28a4: Compare r8d to (0x8)($rsp)
28a9: Did not jump
28ab: Check if eax = ecx (4th argument)
	eax (7) = ecx (4)
FAILED

Trial 7: 3 7 2 7 5 0 7
288a: load edi (3) into eax (7), eax=3
288c: Perform AND from stack (rsp) and r9d (0, which is 6th argument), rsp=1431660877, r8d=5
2891: Did not jump since r9d (6th arugment) is 0
2893: Compare esi (2nd argument) with edi (1st parameter)
2895: if esi (7) > edi (3), don't jump
2897: Added 1 to rd9, rd9=2 (loop counter = 1), r8d=5
289b: Add edx (3rd argument) to eax
	$eax=3, $edx=2 => $eax=5, r8d=5
289d: Compare eax (new value) with esi (2nd argument), r8d=5
	$eax=5, $esi=7
289f: if eax < esi, jump back to 2897, which loops and increments r9d and adds edx (3rd argument) to eax
	5(eax) < 7(esi), jump back to 2897, r9d=2 & eax=10, r8d=5
	Don't jump since eax > esi (10 > 8)
2897: Added 1 to rd9, rd9=2 (loop counter = 2), r8d=5
289b: Add edx (3rd argument) to eax
	$eax=5, $edx=2 => $eax=7, r8d=5
289d: Compare eax (new value) with esi (2nd argument), r8d=5
	$eax=7, $esi=7
289f: if eax < esi, jump back to 2897, which loops and increments r9d and adds edx (3rd argument) to eax
	7(eax) < 7(esi), jump back to 2897, r9d=2 & eax=7, r8d=5
	Didn't jump
28a1: Add r9d (2) to r8d (5), $r8d=7
28a4: Compare r8d to (0x8)($rsp)
28a9: Did not jump
28ab: Check if eax = ecx (4th argument)
	eax (7) = ecx (7)
28af: Moved 1 into eax, which means fun5 succeeded and return 1 
PASSED

SECRET PHASE:
Important Notes:
- Write DangerousWords after your input in PHASE 2 to trigger.
- read_line method can explode bomb so make sure to add breakpoint there .

Trial 1: 1 
WORKED

Was a lucky guess. 
